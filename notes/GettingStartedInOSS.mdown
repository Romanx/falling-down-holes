# Falling down holes: for beginners

What I wish I would have known and some holes I fell into

## Who Am I and why should you care?

Hi everyone, my name is Alex McAuliffe. 
I'm known as Romanx on Github and ItemLevel1 on Twitter and my prefered pronouns are He/Him.

I'm here tell you the story of how I fell into open source.
The pitfalls I fell into along the way, some of the lessons I learned both about open source and myself.
As well as the tools and services that I use to simplify some of the problems I face and help me.
And by the end hopefully along the way convince all or some of you that it could be a worthy thing to investigate for both your own growth and the industry as a whole.

I'm going to prefix this talk with the fact that I'm not a "rockstar" developer, I don't have 500 bajillion open source projects across 640 different languages and I'm definitely not being paid for my open source contributions.
You don't have to be in the 1% of developers that can read the matrix and find a billion pound bug just by reading code to contribute. 

This talk from my point of view as a developer but please don't let this stop you contributing if your skillset is different from my own, different is great.

## What exactly is "Open Source"?

Okay so lets get to it, "What is Open Source".

Wikipedia defines it as _"a type of computer software with its source code made available with a license in which the copyright holder provides the rights to study, change, and distribute the software to anyone and for any purpose."_.

I'd say this defines it pretty well, it's a piece of software (or code) that we write and provide to others with a license stating what we allow them to do with it.
I'll add the aside that there are hundreds of different types of license that provide you, the copyright holder with different benefits.

I personally licence most of my code under the MIT licence, this is mainly due to the fact that the project I started on was MIT. 
It also provides me with what I want in a licence. I want people to be able to do whatever they want with the code provided that I'm attributed and I want to take no liability for anything that they may find wrong with the code.
Frankly I don't think much of my coding ability, I'm pretty average so I don't want any mistakes in something I'm providing free to come back and bite me.

Now this talk is too short to go into any details on licenses however i'd recommend choosealicense.com which is provided by GitHub and spells out many of the licenses in an easy to understand fashion for a non-lawyer like me.

## My Path to Open Source

I started working on open source due to a bug in some software that I was using.
I was working on a project using the most well known dotnet implementation of the mustache templating language, Nustache.
There was a bug in the code that I knew was a bug but it wasn't my code so how could I fix it?
My workmate at the time just said "Find where the bug is in their code, submit a fix and hopefully they'll accept and we can just pull in the newest version. Oh yeah and everyone else will get the fix too".

It took me about 40 minutes to find where the bug was, understand enough of the existing code to understand why the error was being caused and come up with a fix. I understood enough about GitHub to get a pull request open with the changes and started a dialog with the owner
JDiamond. He came back to me saying "Thanks for the contribution but i'm not really working on Nustache anymore. I can give you maintainer access though?".
From that point I was able to merge my own code, into the master branch and create a NuGet release.

The whole cycle took about a week. But during that time we were able to use my patched version of Nustache because their code was open and licence was permissive enough to let us do that. As soon as the master version was merged we just updated our NuGet references and carried on.

After that Nustache became my test bed for a load of things I wanted to be able to do at work but wasn't able to due to time or monitary constraints. Thanks to open source tools and companies that allow usage of their systems for open source projects i was able to setup continuous integration, unit testing and remove the manual process from creating a Nustache release allowing me to accept others pull requests with confidence.

A while after I wanted to explore the new .Net Core and netStandard things being yelled about by Microsoft and other developers that I admire however I didn't feel confident enough in a codebase I was effectively caretaker of.

I began to write my own replacement that would be cross platform, unit tested from the start, performance conscious, some would say to the point of obsession, and most importantly for me at the time it was a greenfield for me to "fix" some of the things I felt we wrong with the original design decisions of Nustache and who doesn't like working on something new?

## Where it all went wrong

And that was where it all went wrong.
Or more accurately where it began to go wrong.
Greenfield projects are great because they give you a fresh clean start and you go into the new project with a sense of optimism since you feel less burdened by the legacy of the past.
At the same time you don't consider the work that went into the original, the bugs that were found (and ideally fixed along the way) and the time spent thinking about problems.

I thought I could do better than Nustache and for a time I was right, It took me 70 days between the first commit and a tag for Alpha 15.
I'd had a working mustache renderer working for quite awhile that was compliant with the mustache spec however this is where I think I should have stopped and released a Beta and eventually a 1.0.

Things shifted after that release and the scope began to creep.
Again I thought I could do better than Nustache's basic Regex parser and write a "proper" one that scanned the incoming template which should in theory give me a large speed increase.

It took me 265 days to get Alpha 16 released and as you can see I had some sense of humor about it.

I'm not going to go into details about why it took so long, mainly due to some wonderful edge cases regarding whitespace and line-endings when rendering templates. I know its exciting?

But what happened during was interesting which is that I burnt out, something I thought couldn't happen when I was effectively working for myself on something that I chose.

I struggled with this bug. It made me feel stupid and want to quit working on Stubble and for some months in between I did.
Feeling like an imposter is not uncommon in our industry and often we need others to remind us that we're good and capable at what we're doing and collaborating with others in the community is where open source shines.

Taking a step back and looking at the problem, I eventually had a breakthrough that made it click.
But the pressure that it was possible someone on the internet was waiting on me to update my library, was enough to make me feel that I had to maintain or at least show activity so they knew that the project wasn't dead and give up on me.

So you're probably thinking I learnt my mistake, cut a beta right after the Alpha and then released the 1.0? Nope. 
I fell down another hole because there was another feature that without I don't consider the project "worthy" of a 1.0.
I thought that if people had been waiting so long already for me to release then a little longer for something I consider to be near complete wouldn't hurt and thats where I am today.

I guess the moral of the story is that many of the things I consider common sense in my everyday job I didn't apply to my open source work.
The idea of having something in a releasable state as often as possible is good since it forces you to break features into managable pieces which is ideal for the part time nature of most open source work.
Try to have some idea of milestones containing features that you would like to release at and try to stick to them as best as you can.
And lastly that accepting for now that something is "good" enough to be released is often vital, at least for me it is because there is always more performance to be found, an easier way of configuring

## Getting the most out of being open source

Some other tools and services that can help you are:

### Source Control

Source control is pretty central to most development efforts and a basic understanding of the tooling will help lower the barrier of entry and make it less scary.

Git is the most common and Github have some excellent sources and tooling on how to get started which a quick search will uncover.

Speaking of Github.

#### Github

Github a very well known repository host for git projects.
Includes issue tracking, milestones (release tracking) and version control.
It's heavily used in the open source community and most projects you will likely find on here.
It's free for open source and private projects however you can pay to have more contributors.

#### Bitbucket

An alternative for github that allows a small number of private repos for free.
It has some build services included at the free tier however i've not used them so have no real idea on how that works.
Also includes trello boards for managing your issues in a more "kanban" agile style as well as build pipelines for continuous integration and other Atlassan's offerings

#### Azure DevOps

A terrible name for a pretty great tool.
They have free hosting for public and private repositories and opt in tooling for both issue management, release tracking, artifact hosting and continous integration with Azure DevOps Pipelines unsurprisingly which we'll discuss in a second.

### Code Quality

There are a variety of services that can give you confidence that the quality of your code is consistent.

#### Continuous Integration

Continuous Integration or CI services listen for changes to your source code and perform actions for you in an automated manner.
They gives us confidence that what we're working on doesn't only _Work on my machine_ and infact will work in a variety of different environments such a different operating systems or even different processor architectures although thats a little further than I've personally found the need to go.

When I describe build here it can be anything from simple scripts to kicking off a whole load of complicated infrastructure.
For my projects It will pull the new code, make sure it builds, run the tests and make sure they all succeed and then push that back to GitHub to inform me that everything is good or if it wasn't that I shouldn't accept it until we can fix the problems.

This creates an dialog between me and the contributor but without the manual overhead of me having to check their contribution until its in a state that ready for merging.

- Appveyor: provide both Windows and Linux build machines for you to run your scripts on and have a whole host of other services you can use during your build such as Database Engines.
- Azure DevOps Pipelines: Pipelines can be used separately from source control. It provides both Windows and Linux build machines for you to run your scripts. It also has the unique aspect of separating both build and release pipelines allowing you to release entirely separately from your build.
- Travis: Travis has Linux build machines and has starting support for Windows machines. Personally i've found it less intuative than Appveyor or Azure DevOps and am moving most of my workload to both Appveyor and Azure DevOps.

#### Code Coverage

If you're writing tests and running them automatically you can use tools like Coverlet to give you a coverage output showing how much of your code is being tested.
This isn't a perfect metric and infact sometimes can lead to writing tests just to increased your coverage, I'm definately guilty of this. 
It does however allow you to see if you're missing whole branches of code in your tests and write some that cover it giving you more confidence so that when others contribute you can be sure your tests are covering what it needs to.

Tools and Services such as Coveralls and CodeCov fall into the category of providing you with fancy graphs and a historical view of how your coverage has improved or decreased. This can give us verification we're going in the right direction and unknowingly going backwards.

### Build Tools
This is an odd heading but I couldn't think of anything better.
When you start building cross platform you'll possibly run into the situation where your build script now won't work. The most common example is powershell on Linux.
Now this is less of an issue with PowershellCore but management of these scripts can also be a whole adventure in itself.
The general rule here is whatever works for you is perfect, it won't change too often but when it does it can lead to a lot of frustration.

#### Cake
Cake or C# Make is a C# domain specific language based method of writing your build tasks.
This has specific libraries for compling your code, copying files or folders or any other tasks you may need.
There's also a health ecosystem of extensions around this for any other needs you may have.
I actually created an extension integrating Coverlet with Cake since I was using both and wanted a fuller experience.
I open sourced this and Cake itself is also open source!

#### Nuke
Another C# based build automation system allowing you to write your build tasks in a C# like domain specific lanaguage. I've not got to use Nuke yet but it's gaining traction and seems like an interesting variation on what Cake is doing.

#### Anything else!
However you do your build scripts the important thing is it is clearly defined somewhere, ideally documented to simplify your changes so that anyone wanting to contribute knows how they can build the project.

### Other open source projects

So those are some of the tools and services that I suggest taking a look at during your journey but to me one of the most important resources that I use regularly when working on Stubble is other open source developers and projects.
I usually try to look for projects with a similar type such as other parsers or templating languages, often these don't even need to be in the same language such as Mustache.java however its useful to look at how others have solved similar problems.

I've used Jon Skeet's NodaTime project heavily when trying to understand how best to layout my project and get it working with Appveyor and Travis.
His approach to a public api which is both intuative and sufficently captures the complexity of his domain is very interesting.
He's an excellent developer and always writes very clean code, I'd advise anyone to take a look.

I also borrowed a lot from Markdig by Xoofx. I actually copied some of his code for string slicing, with attribution of course since its open source with a permissive licence.

BenchmarkDotNet becoming popular allowed me to throw away my rough and ready benchmarks and replace them with something more robust and probably accurate.
At the same time I looked at how Mustache.java was doing their performance testing and mimiced their tests to give myself a more more real-world example as theirs was based on something twitter needed.

### Other open source developers

Reading blogs, walkthroughs and deepdives are always very useful, some in the context of learning new things.
Others for enhancements for your own code based on others learning, fun fact is that my builder interface for Stubble is heavily "inspired" by ASPNET Cores' builder configuration.

Okay so since i'm getting to the end i'll quickly go through a few resources I use regularly:

* Morning Dew : Great weekday resource of aggregated posts from the .Net world covering development, to databases and design
* Steve Gordon : Our own Steve Gordon has been writing some excellent posts about the ASPNet Core world which I enjoy. He even has a series on getting started with motivational speaking which unfortunately has caused you to have to listen to me. Please direct any complaints to Steve.
* Matthew Warren : Some very detailed deep dives on the internals of the .Net runtime and the CLR. Always an interesting read.
* Xoofx : Some interesting posts about C# performance and most recently writing a managed JIT in C#

### Twitter

And lastly Twitter! I used to really dislike twitter and then I began to curate my experience by following developers and other people in the industry who I find interesting or who lead me to interesting content. On the slides you'll see a carousel of some of the people that I follow and who lead me to interesting content and discussions.

## So how can I get started...

Okay so you've listen to me ramble long enough.
If i've peaked your interest at all in jumping down rabbit holes then here are some resources i'd recommend to get started.

If you've got an idea then thats great! Get started, the hardest thing in my personal experience is getting the basis.
Start talking about your idea on social media, find out what other problems people have in the same area and start working on it.
If you don't and to be honest thats entirely understandable, a good place to get started is by contributing to others projects.

Some ways to find projects to contribute is through Github Explore.
It's a curated resource of projects on github that are categorised and you can see whats trending across different time periods and languages.
It's a excellent resource to discover bigger projects that are likely to be mentioned across twitter or in other spaces.

Up for grabs is an excellent starting place as you can find projects and issues that have been specifically selected by the maintainers as a good for getting started.

It's also worth mentioning that a good place to start is with documentation improvements for projects that you think look interesting.
Download their code and try to get it running on your machine, document anything you think isn't clear and contribute it back with a friendly pull request.
Many maintainers would love to have your input in making their project better and often docs are overlooked.

## Wrapup

I hope that this rambling talk has at least warned you of some of the pitfalls that I fell into, but also given you an insight into how exiting and interesting open source can be.
There are so many excellent projects, maintainers and influencers in the open source community and especially the resurgence the dotnet open source community has seen in the last few years.

This talk is available on github at the url behind me: https://github.com/romanx/falling-down-holes

While working on this I was trying to procrastinate so much I wrote it in React so a thank you to FormidableLabs for writing spectacle which helped me write my slide application.

This has been a terrfying experience and I hope that I've not bored you all. My biggest drive with this talk was to show that If I can develop open source software then so can you.
And if I can give a talk on something then so can you.
Hopefully I get to hear one of you speak next time.

Please learn as much as you can from everyone you can, embrace diversity and encourage it.
Thank you for listening to me.
